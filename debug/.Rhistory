stop("Invalid alignment type.")
}
}
d$lo1 <- smoothalign(d,1,"logodds")
d$sd0 <- smoothalign(d,0,"subdnm")
cutoff = 5
d2 <- d %>%
#filter(vreply==F,(ba+nba)>=cutoff,(bna+nbna)>=cutoff) %>%
group_by(vspeak,category,vreply) %>%
summarize(base=mean((2*ba+nba+bna)/(2*(ba+nba+bna+nbna))),Ours=mean(lo1),DNM=mean(sd0)) %>%
gather(alignment,mean,Ours,DNM)
ggplot(d2,aes(x=vspeak,y=mean,color=base,label=category)) + geom_violin() + geom_text(position=position_jitter(w=0.2),size=4) + labs(title=paste("Non-verified repliers' alignments\naggregated by marker (Cutoff=",cutoff,")",sep=''),x="Speaker verification",y="Mean alignment",color="Speaker-replier\npairs using\nthe marker") + facet_wrap(~ alignment,scales="free") + theme_grey()
ggplot(d2[alignment=='Ours',],aes(x=base,y=mean,color=vspeak)) + geom_point()
ggplot(d2[alignment=='Ours',],aes(x=vreply,y=mean)) + geom_violin()
t.test(filter(d2, alignment=="Ours")$mean~filter(d2, alignment=="Ours")$vreply)
hist(d$numUtterances)
filter(d2$vspeak)
filter(d2, vspeak==True)
filter(d2, vspeak==TRUE
)
nrow(filter(d2, vspeak==TRUE))
mean(filter(d2, vspeak==TRUE))
mean(filter(d2, vspeak==TRUE)$numUtterances)
mean(filter(d2, vspeak==TRUE)$base)
nrow(filter(d2, vspeak==TRUE))
nrow(filter(d2, vspeak==FALSE))
ggplot(d2,aes(x=vspeak,y=mean,color=base,label=category)) + geom_violin() + geom_text(position=position_jitter(w=0.2),size=4) + labs(title=paste("Non-verified repliers' alignments\naggregated by marker (Cutoff=",cutoff,")",sep=''),x="Speaker verification",y="Mean alignment",color="Speaker-replier\npairs using\nthe marker") + facet_wrap(~ alignment,scales="free") + theme_grey()
ggplot(d2[alignment=='Ours',],aes(x=base,y=mean,color=vspeak)) + geom_point()
df <- fread('results.csv', header=T)
# Cleaning down the data table:
d <- df[,list(ba=ba,nba=nba,bna=bna,nbna=nbna,
vspeak=verifiedSpeaker,vreply=verifiedReplier,
sid=speakerId,rid=replierId,category=category,
pyalign=alignment,numUtterances=numUtterances),]
mean(filter(df, vspeak==TRUE)$numUtterances)
mean(filter(df, verifiedSpeaker==TRUE)$numUtterances)
mean(filter(df, verifiedSpeaker==FALSE)$numUtterances)
ggplot(df, aes(x=verifiedSpeaker, y=numUtterances)) + geom_violin(
)
ggplot(filter(df, numUtterances < 500), aes(x=verifiedSpeaker, y=numUtterances)) + geom_violin()
ggplot(filter(df, numUtterances < 200), aes(x=verifiedSpeaker, y=numUtterances)) + geom_violin()
ggplot(filter(df, numUtterances < 150), aes(x=verifiedSpeaker, y=numUtterances)) + geom_violin()
ggplot(filter(df, numUtterances < 100), aes(x=verifiedSpeaker, y=numUtterances)) + geom_violin()
ggplot(filter(df, numUtterances < 25), aes(x=verifiedSpeaker, y=numUtterances)) + geom_violin()
t.test(df$verifiedSpeaker, df$numUtterances)
t.test(df$verifiedSpeaker~ df$numUtterances)
t.test(df$numUtterances~df$nverifiedSpeaker)
t.test(df$numUtterances~df$verifiedSpeaker)
t.test(df$numUtterances~df$verifiedReplier)
df <- fread('results.csv', header=T)
# Cleaning down the data table:
d <- df[,list(ba=ba,nba=nba,bna=bna,nbna=nbna,
vspeak=verifiedSpeaker,vreply=verifiedReplier,
sid=speakerId,rid=replierId,category=category,
pyalign=alignment,numUtterances=numUtterances),]
smoothalign <- function(df,sm,align="logodds") {
if (align=="logodds") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+sm)+log(df$bna+df$nbna+2*sm))
} else if (align=="subodds") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+sm)/(df$bna+df$nbna+2*sm))
} else if (align=="logdnm") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+df$ba+sm)+log(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else if (align=="subdnm") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+df$ba+sm)/(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else {
stop("Invalid alignment type.")
}
}
d$lo1 <- smoothalign(d,1,"logodds")
d$sd0 <- smoothalign(d,0,"subdnm")
cutoff = 5
d2 <- d %>%
#filter(vreply==F,(ba+nba)>=cutoff,(bna+nbna)>=cutoff) %>%
group_by(vspeak,category,vreply) %>%
summarize(base=mean((2*ba+nba+bna)/(2*(ba+nba+bna+nbna))),Ours=mean(lo1),DNM=mean(sd0)) %>%
gather(alignment,mean,Ours,DNM)
ggplot(d2,aes(x=vspeak,y=mean,color=base,label=category)) + geom_violin() + geom_text(position=position_jitter(w=0.2),size=4) + labs(title=paste("Non-verified repliers' alignments\naggregated by marker (Cutoff=",cutoff,")",sep=''),x="Speaker verification",y="Mean alignment",color="Speaker-replier\npairs using\nthe marker") + facet_wrap(~ alignment,scales="free") + theme_grey()
ggplot(d2[alignment=='Ours',],aes(x=base,y=mean,color=vspeak)) + geom_point()
ggplot(d2[alignment=='Ours',],aes(x=vspeak,y=mean)) + geom_violin()
t.test(filter(d2, alignment=="Ours")$mean~filter(d2, alignment=="Ours")$vspeak)
df <- fread('shuffled/shuffled/TTTTTT.csv', header=T)
# Cleaning down the data table:
d <- df[,list(ba=ba,nba=nba,bna=bna,nbna=nbna,
vspeak=verifiedSpeaker,vreply=verifiedReplier,
sid=speakerId,rid=replierId,category=category,
pyalign=alignment,numUtterances=numUtterances),]
smoothalign <- function(df,sm,align="logodds") {
if (align=="logodds") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+sm)+log(df$bna+df$nbna+2*sm))
} else if (align=="subodds") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+sm)/(df$bna+df$nbna+2*sm))
} else if (align=="logdnm") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+df$ba+sm)+log(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else if (align=="subdnm") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+df$ba+sm)/(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else {
stop("Invalid alignment type.")
}
}
d$lo1 <- smoothalign(d,1,"logodds")
d$sd0 <- smoothalign(d,0,"subdnm")
cutoff = 5
d2 <- d %>%
#filter(vreply==F,(ba+nba)>=cutoff,(bna+nbna)>=cutoff) %>%
group_by(vspeak,category,vreply) %>%
summarize(base=mean((2*ba+nba+bna)/(2*(ba+nba+bna+nbna))),Ours=mean(lo1),DNM=mean(sd0)) %>%
gather(alignment,mean,Ours,DNM)
ggplot(d2,aes(x=vspeak,y=mean,color=base,label=category)) + geom_violin() + geom_text(position=position_jitter(w=0.2),size=4) + labs(title=paste("Non-verified repliers' alignments\naggregated by marker (Cutoff=",cutoff,")",sep=''),x="Speaker verification",y="Mean alignment",color="Speaker-replier\npairs using\nthe marker") + facet_wrap(~ alignment,scales="free") + theme_grey()
ggplot(d2[alignment=='Ours',],aes(x=base,y=mean,color=vspeak)) + geom_point()
ggplot(d2[alignment=='Ours',],aes(x=vspeak,y=mean)) + geom_violin()
t.test(filter(d2, alignment=="Ours")$mean~filter(d2, alignment=="Ours")$vspeak)
df <- fread('shuffled/shuffledTTTTTT.csv', header=T)
# Cleaning down the data table:
d <- df[,list(ba=ba,nba=nba,bna=bna,nbna=nbna,
vspeak=verifiedSpeaker,vreply=verifiedReplier,
sid=speakerId,rid=replierId,category=category,
pyalign=alignment,numUtterances=numUtterances),]
smoothalign <- function(df,sm,align="logodds") {
if (align=="logodds") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+sm)+log(df$bna+df$nbna+2*sm))
} else if (align=="subodds") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+sm)/(df$bna+df$nbna+2*sm))
} else if (align=="logdnm") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+df$ba+sm)+log(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else if (align=="subdnm") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+df$ba+sm)/(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else {
stop("Invalid alignment type.")
}
}
d$lo1 <- smoothalign(d,1,"logodds")
d$sd0 <- smoothalign(d,0,"subdnm")
cutoff = 5
d2 <- d %>%
#filter(vreply==F,(ba+nba)>=cutoff,(bna+nbna)>=cutoff) %>%
group_by(vspeak,category,vreply) %>%
summarize(base=mean((2*ba+nba+bna)/(2*(ba+nba+bna+nbna))),Ours=mean(lo1),DNM=mean(sd0)) %>%
gather(alignment,mean,Ours,DNM)
ggplot(d2,aes(x=vspeak,y=mean,color=base,label=category)) + geom_violin() + geom_text(position=position_jitter(w=0.2),size=4) + labs(title=paste("Non-verified repliers' alignments\naggregated by marker (Cutoff=",cutoff,")",sep=''),x="Speaker verification",y="Mean alignment",color="Speaker-replier\npairs using\nthe marker") + facet_wrap(~ alignment,scales="free") + theme_grey()
ggplot(d2[alignment=='Ours',],aes(x=base,y=mean,color=vspeak)) + geom_point()
ggplot(d2[alignment=='Ours',],aes(x=vspeak,y=mean)) + geom_violin()
t.test(filter(d2, alignment=="Ours")$mean~filter(d2, alignment=="Ours")$vspeak)
df <- fread('shuffled/shuffledTTTTTT.csv', header=T)
# Cleaning down the data table:
d <- df[,list(ba=ba,nba=nba,bna=bna,nbna=nbna,
vspeak=verifiedSpeaker,vreply=verifiedReplier,
sid=speakerId,rid=replierId,category=category,
pyalign=alignment,numUtterances=numUtterances),]
smoothalign <- function(df,sm,align="logodds") {
if (align=="logodds") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+sm)+log(df$bna+df$nbna+2*sm))
} else if (align=="subodds") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+sm)/(df$bna+df$nbna+2*sm))
} else if (align=="logdnm") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+df$ba+sm)+log(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else if (align=="subdnm") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+df$ba+sm)/(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else {
stop("Invalid alignment type.")
}
}
d$lo1 <- smoothalign(d,1,"logodds")
d$sd0 <- smoothalign(d,0,"subdnm")
cutoff = 5
d2 <- d %>%
#filter(vreply==F,(ba+nba)>=cutoff,(bna+nbna)>=cutoff) %>%
group_by(vspeak,category,vreply) %>%
summarize(base=mean((2*ba+nba+bna)/(2*(ba+nba+bna+nbna))),Ours=mean(lo1),DNM=mean(sd0)) %>%
gather(alignment,mean,Ours,DNM)
ggplot(d2,aes(x=vspeak,y=mean,color=base,label=category)) + geom_violin() + geom_text(position=position_jitter(w=0.2),size=4) + labs(title=paste("Non-verified repliers' alignments\naggregated by marker (Cutoff=",cutoff,")",sep=''),x="Speaker verification",y="Mean alignment",color="Speaker-replier\npairs using\nthe marker") + facet_wrap(~ alignment,scales="free") + theme_grey()
ggplot(d2[alignment=='Ours',],aes(x=base,y=mean,color=vspeak)) + geom_point()
ggplot(d2[alignment=='Ours',],aes(x=vspeak,y=mean)) + geom_violin()
t.test(filter(d2, alignment=="Ours")$mean~filter(d2, alignment=="Ours")$vspeak)
pyalign=alignment,numUtterances=numUtterances),]
df <- fread('shuffled/shuffledTTTTTT.csv', header=T)
# Cleaning down the data table:
d <- df[,list(ba=ba,nba=nba,bna=bna,nbna=nbna,
vspeak=verifiedSpeaker,vreply=verifiedReplier,
sid=speakerId,rid=replierId,category=category,
pyalign=alignment,numUtterances=numUtterances),]
smoothalign <- function(df,sm,align="logodds") {
if (align=="logodds") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+sm)+log(df$bna+df$nbna+2*sm))
} else if (align=="subodds") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+sm)/(df$bna+df$nbna+2*sm))
} else if (align=="logdnm") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+df$ba+sm)+log(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else if (align=="subdnm") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+df$ba+sm)/(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else {
stop("Invalid alignment type.")
}
}
d$lo1 <- smoothalign(d,1,"logodds")
d$sd0 <- smoothalign(d,0,"subdnm")
cutoff = 5
d2 <- d %>%
#filter(vreply==F,(ba+nba)>=cutoff,(bna+nbna)>=cutoff) %>%
group_by(vspeak,category,vreply) %>%
summarize(base=mean((2*ba+nba+bna)/(2*(ba+nba+bna+nbna))),Ours=mean(lo1),DNM=mean(sd0)) %>%
gather(alignment,mean,Ours,DNM)
ggplot(d2,aes(x=vspeak,y=mean,color=base,label=category)) + geom_violin() + geom_text(position=position_jitter(w=0.2),size=4) + labs(title=paste("Non-verified repliers' alignments\naggregated by marker (Cutoff=",cutoff,")",sep=''),x="Speaker verification",y="Mean alignment",color="Speaker-replier\npairs using\nthe marker") + facet_wrap(~ alignment,scales="free") + theme_grey()
ggplot(d2[alignment=='Ours',],aes(x=base,y=mean,color=vspeak)) + geom_point()
ggplot(d2[alignment=='Ours',],aes(x=vspeak,y=mean)) + geom_violin()
t.test(filter(d2, alignment=="Ours")$mean~filter(d2, alignment=="Ours")$vspeak)
df <- fread('shuffled/shuffledTTFTTT.csv', header=T)
# Cleaning down the data table:
d <- df[,list(ba=ba,nba=nba,bna=bna,nbna=nbna,
vspeak=verifiedSpeaker,vreply=verifiedReplier,
sid=speakerId,rid=replierId,category=category,
pyalign=alignment,numUtterances=numUtterances),]
smoothalign <- function(df,sm,align="logodds") {
if (align=="logodds") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+sm)+log(df$bna+df$nbna+2*sm))
} else if (align=="subodds") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+sm)/(df$bna+df$nbna+2*sm))
} else if (align=="logdnm") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+df$ba+sm)+log(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else if (align=="subdnm") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+df$ba+sm)/(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else {
stop("Invalid alignment type.")
}
}
d$lo1 <- smoothalign(d,1,"logodds")
d$sd0 <- smoothalign(d,0,"subdnm")
cutoff = 5
d2 <- d %>%
#filter(vreply==F,(ba+nba)>=cutoff,(bna+nbna)>=cutoff) %>%
group_by(vspeak,category,vreply) %>%
summarize(base=mean((2*ba+nba+bna)/(2*(ba+nba+bna+nbna))),Ours=mean(lo1),DNM=mean(sd0)) %>%
gather(alignment,mean,Ours,DNM)
ggplot(d2,aes(x=vspeak,y=mean,color=base,label=category)) + geom_violin() + geom_text(position=position_jitter(w=0.2),size=4) + labs(title=paste("Non-verified repliers' alignments\naggregated by marker (Cutoff=",cutoff,")",sep=''),x="Speaker verification",y="Mean alignment",color="Speaker-replier\npairs using\nthe marker") + facet_wrap(~ alignment,scales="free") + theme_grey()
ggplot(d2[alignment=='Ours',],aes(x=base,y=mean,color=vspeak)) + geom_point()
ggplot(d2[alignment=='Ours',],aes(x=vspeak,y=mean)) + geom_violin()
t.test(filter(d2, alignment=="Ours")$mean~filter(d2, alignment=="Ours")$vspeak)
df <- fread('shuffled/shuffledTTFTTT.csv', header=T)
# Cleaning down the data table:
d <- df[,list(ba=ba,nba=nba,bna=bna,nbna=nbna,
vspeak=verifiedSpeaker,vreply=verifiedReplier,
sid=speakerId,rid=replierId,category=category,
pyalign=alignment,numUtterances=numUtterances),]
smoothalign <- function(df,sm,align="logodds") {
if (align=="logodds") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+sm)+log(df$bna+df$nbna+2*sm))
} else if (align=="subodds") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+sm)/(df$bna+df$nbna+2*sm))
} else if (align=="logdnm") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+df$ba+sm)+log(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else if (align=="subdnm") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+df$ba+sm)/(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else {
stop("Invalid alignment type.")
}
}
d$lo1 <- smoothalign(d,1,"logodds")
d$sd0 <- smoothalign(d,0,"subdnm")
cutoff = 5
d2 <- d %>%
#filter(vreply==F,(ba+nba)>=cutoff,(bna+nbna)>=cutoff) %>%
group_by(vspeak,category,vreply) %>%
summarize(base=mean((2*ba+nba+bna)/(2*(ba+nba+bna+nbna))),Ours=mean(lo1),DNM=mean(sd0)) %>%
gather(alignment,mean,Ours,DNM)
ggplot(d2,aes(x=vspeak,y=mean,color=base,label=category)) + geom_violin() + geom_text(position=position_jitter(w=0.2),size=4) + labs(title=paste("Non-verified repliers' alignments\naggregated by marker (Cutoff=",cutoff,")",sep=''),x="Speaker verification",y="Mean alignment",color="Speaker-replier\npairs using\nthe marker") + facet_wrap(~ alignment,scales="free") + theme_grey()
ggplot(d2[alignment=='Ours',],aes(x=base,y=mean,color=vspeak)) + geom_point()
ggplot(d2[alignment=='Ours',],aes(x=vspeak,y=mean)) + geom_violin()
t.test(filter(d2, alignment=="Ours")$mean~filter(d2, alignment=="Ours")$vspeak)
t.test(df$numUtterances~df$verifiedSpeaker)
Welch Two Sample t-test
data:  df$numUtterances by df$verifiedSpeaker
t = -47.9256, df = 330212.2, p-value < 2.2e-16
alternative hypothesis: true difference in means is not equal to 0
95 percent confidence interval:
-3.418212 -3.149614
sample estimates:
mean in group FALSE  mean in group TRUE
7.437988           10.721901
t.test(df$numUtterances~df$verifiedSpeaker)
df <- fread('shuffled/shuffledTTTTTT.csv', header=T)
# Cleaning down the data table:
d <- df[,list(ba=ba,nba=nba,bna=bna,nbna=nbna,
vspeak=verifiedSpeaker,vreply=verifiedReplier,
sid=speakerId,rid=replierId,category=category,
pyalign=alignment,numUtterances=numUtterances),]
smoothalign <- function(df,sm,align="logodds") {
if (align=="logodds") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+sm)+log(df$bna+df$nbna+2*sm))
} else if (align=="subodds") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+sm)/(df$bna+df$nbna+2*sm))
} else if (align=="logdnm") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+df$ba+sm)+log(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else if (align=="subdnm") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+df$ba+sm)/(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else {
stop("Invalid alignment type.")
}
}
d$lo1 <- smoothalign(d,1,"logodds")
d$sd0 <- smoothalign(d,0,"subdnm")
cutoff = 5
d2 <- d %>%
#filter(vreply==F,(ba+nba)>=cutoff,(bna+nbna)>=cutoff) %>%
group_by(vspeak,category,vreply) %>%
summarize(base=mean((2*ba+nba+bna)/(2*(ba+nba+bna+nbna))),Ours=mean(lo1),DNM=mean(sd0)) %>%
gather(alignment,mean,Ours,DNM)
ggplot(d2,aes(x=vspeak,y=mean,color=base,label=category)) + geom_violin() + geom_text(position=position_jitter(w=0.2),size=4) + labs(title=paste("Non-verified repliers' alignments\naggregated by marker (Cutoff=",cutoff,")",sep=''),x="Speaker verification",y="Mean alignment",color="Speaker-replier\npairs using\nthe marker") + facet_wrap(~ alignment,scales="free") + theme_grey()
ggplot(d2[alignment=='Ours',],aes(x=base,y=mean,color=vspeak)) + geom_point()
ggplot(d2[alignment=='Ours',],aes(x=vspeak,y=mean)) + geom_violin()
t.test(filter(d2, alignment=="Ours")$mean~filter(d2, alignment=="Ours")$vspeak)
t.test(d2$base~d2$verifiedSpeaker)
t.test(d2$base~d2$vspeak)
df <- fread('shuffled/shuffledTTTTTT.csv', header=T)
# Cleaning down the data table:
d <- df[,list(ba=ba,nba=nba,bna=bna,nbna=nbna,
vspeak=verifiedSpeaker,vreply=verifiedReplier,
sid=speakerId,rid=replierId,category=category,
pyalign=alignment,numUtterances=numUtterances),]
smoothalign <- function(df,sm,align="logodds") {
if (align=="logodds") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+sm)+log(df$bna+df$nbna+2*sm))
} else if (align=="subodds") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+sm)/(df$bna+df$nbna+2*sm))
} else if (align=="logdnm") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+df$ba+sm)+log(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else if (align=="subdnm") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+df$ba+sm)/(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else {
stop("Invalid alignment type.")
}
}
d$lo1 <- smoothalign(d,1,"logodds")
d$sd0 <- smoothalign(d,0,"subdnm")
cutoff = 5
d2 <- d %>%
#filter(vreply==F,(ba+nba)>=cutoff,(bna+nbna)>=cutoff) %>%
group_by(vspeak,category,vreply) %>%
summarize(base=mean((2*ba+nba+bna)/(2*(ba+nba+bna+nbna))),Ours=mean(lo1),DNM=mean(sd0)) %>%
gather(alignment,mean,Ours,DNM)
ggplot(d2,aes(x=vspeak,y=mean,color=base,label=category)) + geom_violin() + geom_text(position=position_jitter(w=0.2),size=4) + labs(title=paste("Non-verified repliers' alignments\naggregated by marker (Cutoff=",cutoff,")",sep=''),x="Speaker verification",y="Mean alignment",color="Speaker-replier\npairs using\nthe marker") + facet_wrap(~ alignment,scales="free") + theme_grey()
ggplot(d2[alignment=='Ours',],aes(x=base,y=mean,color=vspeak)) + geom_point()
ggplot(d2[alignment=='Ours',],aes(x=vspeak,y=mean)) + geom_violin()
t.test(filter(d2, alignment=="Ours")$mean~filter(d2, alignment=="Ours")$vspeak)
df <- fread('shuffled/shuffledTTFTTT.csv', header=T)
# Cleaning down the data table:
d <- df[,list(ba=ba,nba=nba,bna=bna,nbna=nbna,
vspeak=verifiedSpeaker,vreply=verifiedReplier,
sid=speakerId,rid=replierId,category=category,
pyalign=alignment,numUtterances=numUtterances),]
smoothalign <- function(df,sm,align="logodds") {
if (align=="logodds") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+sm)+log(df$bna+df$nbna+2*sm))
} else if (align=="subodds") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+sm)/(df$bna+df$nbna+2*sm))
} else if (align=="logdnm") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+df$ba+sm)+log(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else if (align=="subdnm") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+df$ba+sm)/(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else {
stop("Invalid alignment type.")
}
}
d$lo1 <- smoothalign(d,1,"logodds")
d$sd0 <- smoothalign(d,0,"subdnm")
cutoff = 5
d2 <- d %>%
#filter(vreply==F,(ba+nba)>=cutoff,(bna+nbna)>=cutoff) %>%
group_by(vspeak,category,vreply) %>%
summarize(base=mean((2*ba+nba+bna)/(2*(ba+nba+bna+nbna))),Ours=mean(lo1),DNM=mean(sd0)) %>%
gather(alignment,mean,Ours,DNM)
ggplot(d2,aes(x=vspeak,y=mean,color=base,label=category)) + geom_violin() + geom_text(position=position_jitter(w=0.2),size=4) + labs(title=paste("Non-verified repliers' alignments\naggregated by marker (Cutoff=",cutoff,")",sep=''),x="Speaker verification",y="Mean alignment",color="Speaker-replier\npairs using\nthe marker") + facet_wrap(~ alignment,scales="free") + theme_grey()
ggplot(d2[alignment=='Ours',],aes(x=base,y=mean,color=vspeak)) + geom_point()
ggplot(d2[alignment=='Ours',],aes(x=vspeak,y=mean)) + geom_violin()
t.test(filter(d2, alignment=="Ours")$mean~filter(d2, alignment=="Ours")$vspeak)
t.test(d2$base~d2$vspeak)
t.test(d2$base~d2$vspeak)
df <- fread('shuffled/shuffledTTFTTT.csv', header=T)
# Cleaning down the data table:
d <- df[,list(ba=ba,nba=nba,bna=bna,nbna=nbna,
vspeak=verifiedSpeaker,vreply=verifiedReplier,
sid=speakerId,rid=replierId,category=category,
pyalign=alignment,numUtterances=numUtterances),]
smoothalign <- function(df,sm,align="logodds") {
if (align=="logodds") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+sm)+log(df$bna+df$nbna+2*sm))
} else if (align=="subodds") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+sm)/(df$bna+df$nbna+2*sm))
} else if (align=="logdnm") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+df$ba+sm)+log(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else if (align=="subdnm") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+df$ba+sm)/(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else {
stop("Invalid alignment type.")
}
}
d$lo1 <- smoothalign(d,1,"logodds")
d$sd0 <- smoothalign(d,0,"subdnm")
cutoff = 5
d2 <- d %>%
#filter(vreply==F,(ba+nba)>=cutoff,(bna+nbna)>=cutoff) %>%
group_by(vspeak,category,vreply) %>%
summarize(base=mean((2*ba+nba+bna)/(2*(ba+nba+bna+nbna))),Ours=mean(lo1),DNM=mean(sd0)) %>%
gather(alignment,mean,Ours,DNM)
ggplot(d2,aes(x=vspeak,y=mean,color=base,label=category)) + geom_violin() + geom_text(position=position_jitter(w=0.2),size=4) + labs(title=paste("Non-verified repliers' alignments\naggregated by marker (Cutoff=",cutoff,")",sep=''),x="Speaker verification",y="Mean alignment",color="Speaker-replier\npairs using\nthe marker") + facet_wrap(~ alignment,scales="free") + theme_grey()
ggplot(d2[alignment=='Ours',],aes(x=base,y=mean,color=vspeak)) + geom_point()
ggplot(d2[alignment=='Ours',],aes(x=vspeak,y=mean)) + geom_violin()
t.test(filter(d2, alignment=="Ours")$mean~filter(d2, alignment=="Ours")$vspeak)
t.test(df$numUtterances~d2$vspeak)
t.test(df$numUtterances~d2$verifiedSpeaker)
t.test(df$numUtterances~df$verifiedSpeaker)
nrow(filter(df, verifiedSpeaker==T))
nrow(filter(df, verifiedSpeaker==F))
nrow(filter(df, verifiedReplier==F))
nrow(filter(df, verifiedReplier==T))
df <- fread('shuffled/shuffledTTFTTT.csv', header=T)
# Cleaning down the data table:
d <- df[,list(ba=ba,nba=nba,bna=bna,nbna=nbna,
vspeak=verifiedSpeaker,vreply=verifiedReplier,
sid=speakerId,rid=replierId,category=category,
pyalign=alignment,numUtterances=numUtterances),]
smoothalign <- function(df,sm,align="logodds") {
if (align=="logodds") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+sm)+log(df$bna+df$nbna+2*sm))
} else if (align=="subodds") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+sm)/(df$bna+df$nbna+2*sm))
} else if (align=="logdnm") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+df$ba+sm)+log(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else if (align=="subdnm") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+df$ba+sm)/(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else {
stop("Invalid alignment type.")
}
}
d$lo1 <- smoothalign(d,1,"logodds")
d$sd0 <- smoothalign(d,0,"subdnm")
cutoff = 5
d2 <- d %>%
#filter(vreply==F,(ba+nba)>=cutoff,(bna+nbna)>=cutoff) %>%
group_by(vspeak,category,vreply) %>%
summarize(base=mean((2*ba+nba+bna)/(2*(ba+nba+bna+nbna))),Ours=mean(lo1),DNM=mean(sd0)) %>%
gather(alignment,mean,Ours,DNM)
ggplot(d2,aes(x=vspeak,y=mean,color=base,label=category)) + geom_violin() + geom_text(position=position_jitter(w=0.2),size=4) + labs(title=paste("Non-verified repliers' alignments\naggregated by marker (Cutoff=",cutoff,")",sep=''),x="Speaker verification",y="Mean alignment",color="Speaker-replier\npairs using\nthe marker") + facet_wrap(~ alignment,scales="free") + theme_grey()
ggplot(d2[alignment=='Ours',],aes(x=base,y=mean,color=vspeak)) + geom_point()
ggplot(d2[alignment=='Ours',],aes(x=vspeak,y=mean)) + geom_violin()
t.test(filter(d2, alignment=="Ours")$mean~filter(d2, alignment=="Ours")$vspeak)
t.test(df$numUtterances~df$verifiedSpeaker)
mean(df$numUtterances)
df <- fread('shuffled/shuffledTTTTTT.csv', header=T)
mean(df$numUtterances)
df <- fread('shuffled/shuffledFFFFFF.csv', header=T)
# Cleaning down the data table:
d <- df[,list(ba=ba,nba=nba,bna=bna,nbna=nbna,
vspeak=verifiedSpeaker,vreply=verifiedReplier,
sid=speakerId,rid=replierId,category=category,
pyalign=alignment,numUtterances=numUtterances),]
smoothalign <- function(df,sm,align="logodds") {
if (align=="logodds") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+sm)+log(df$bna+df$nbna+2*sm))
} else if (align=="subodds") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+sm)/(df$bna+df$nbna+2*sm))
} else if (align=="logdnm") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+df$ba+sm)+log(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else if (align=="subdnm") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+df$ba+sm)/(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else {
stop("Invalid alignment type.")
}
}
d$lo1 <- smoothalign(d,1,"logodds")
d$sd0 <- smoothalign(d,0,"subdnm")
cutoff = 5
d2 <- d %>%
#filter(vreply==F,(ba+nba)>=cutoff,(bna+nbna)>=cutoff) %>%
group_by(vspeak,category,vreply) %>%
summarize(base=mean((2*ba+nba+bna)/(2*(ba+nba+bna+nbna))),Ours=mean(lo1),DNM=mean(sd0)) %>%
gather(alignment,mean,Ours,DNM)
ggplot(d2,aes(x=vspeak,y=mean,color=base,label=category)) + geom_violin() + geom_text(position=position_jitter(w=0.2),size=4) + labs(title=paste("Non-verified repliers' alignments\naggregated by marker (Cutoff=",cutoff,")",sep=''),x="Speaker verification",y="Mean alignment",color="Speaker-replier\npairs using\nthe marker") + facet_wrap(~ alignment,scales="free") + theme_grey()
ggplot(d2[alignment=='Ours',],aes(x=base,y=mean,color=vspeak)) + geom_point()
ggplot(d2[alignment=='Ours',],aes(x=vspeak,y=mean)) + geom_violin()
t.test(filter(d2, alignment=="Ours")$mean~filter(d2, alignment=="Ours")$vspeak)
mean(df$numUtterances)
df <- fread('shuffled/shuffledTTFTTT.csv', header=T)
# Cleaning down the data table:
d <- df[,list(ba=ba,nba=nba,bna=bna,nbna=nbna,
vspeak=verifiedSpeaker,vreply=verifiedReplier,
sid=speakerId,rid=replierId,category=category,
pyalign=alignment,numUtterances=numUtterances),]
smoothalign <- function(df,sm,align="logodds") {
if (align=="logodds") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+sm)+log(df$bna+df$nbna+2*sm))
} else if (align=="subodds") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+sm)/(df$bna+df$nbna+2*sm))
} else if (align=="logdnm") {
return(log(df$ba+sm)-log(df$ba+df$nba+2*sm)-log(df$bna+df$ba+sm)+log(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else if (align=="subdnm") {
return((df$ba+sm)/(df$ba+df$nba+2*sm)-(df$bna+df$ba+sm)/(df$nba+df$ba+df$bna+df$nbna+2*sm))
} else {
stop("Invalid alignment type.")
}
}
d$lo1 <- smoothalign(d,1,"logodds")
d$sd0 <- smoothalign(d,0,"subdnm")
cutoff = 5
d2 <- d %>%
#filter(vreply==F,(ba+nba)>=cutoff,(bna+nbna)>=cutoff) %>%
group_by(vspeak,category,vreply) %>%
summarize(base=mean((2*ba+nba+bna)/(2*(ba+nba+bna+nbna))),Ours=mean(lo1),DNM=mean(sd0)) %>%
gather(alignment,mean,Ours,DNM)
ggplot(d2,aes(x=vspeak,y=mean,color=base,label=category)) + geom_violin() + geom_text(position=position_jitter(w=0.2),size=4) + labs(title=paste("Non-verified repliers' alignments\naggregated by marker (Cutoff=",cutoff,")",sep=''),x="Speaker verification",y="Mean alignment",color="Speaker-replier\npairs using\nthe marker") + facet_wrap(~ alignment,scales="free") + theme_grey()
ggplot(d2[alignment=='Ours',],aes(x=base,y=mean,color=vspeak)) + geom_point()
ggplot(d2[alignment=='Ours',],aes(x=vspeak,y=mean)) + geom_violin()
t.test(filter(d2, alignment=="Ours")$mean~filter(d2, alignment=="Ours")$vspeak)
df
